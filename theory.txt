What is Golang?
    Go is a high level, general-purpose programming language that is very strongly and statically typed by 
    providing support for garbage collection and concurrent programming. 

the advantages of GO:
    GO compiles very quickly
    Go supports concurrency at the language level
    Functions are first class objects in GO
    GO has garbage collection
    Strings and Maps are built into the language
    Golang is faster than other programming languages, which enhances the availability and reliability of services.

Go is an effort to have:
    Dynamically typed language and interpreted language
    Compiled language and the safety and efficiency of statistically typed
    To be fast in the compilation
    To support the multi-core computing

the benefits of using Go compared to other languages?
    1) Unlike other languages which started as academic experiments, Go code is pragmatically designed. 
    Every feature and syntax decision is engineered to make life easier for the programmer.
    2) Golang is optimized for concurrency and works well at scale.
    3) Golang is often considered more readable than other languages due to a single standard code format.
    4) Automatic garbage collection is notably more efficient than Java or Python because it executes concurrently alongside the program.

Package:
    The purpose of a package is to design and maintain a large number of programs by grouping related features together 
    into single units so that they can be easy to maintain and understand and independent of the other package programs. 
    This modularity allows them to share and reuse.


String:
    it is a sequence of variable-width characters where each and every character is represented by one or more 
    bytes using UTF-8 Encoding.
    strings are the immutable chain of arbitrary bytes(including bytes with zero value) or string is a read-only 
    slice of bytes and the bytes of the strings can be represented in the Unicode text using UTF-8 encoding.


Pointers:
    A pointer is a special kind of variable that is not only used to store the memory addresses of other variables 
    but also points where the memory is located and provides ways to find out the value stored at that memory location.

    built-in-support in GO includes
    Container: container/list , container/heap
    Web Server: net/http
    Cryptography: Crypto/md5 , crypto/sha1
    Compression: compress/ gzip
    Database: database/sql

You can access the command line argument using the os.Args variables.

Golang uses the following types:
    Method
    Boolean
    Numeric
    String
    Array
    Slice
    Struct
    Pointer
    Function
    Interface
    Map
    Channel

Golang doesn't have the inheritance concept. But to support code reuse and polymorphism functionality, 
it provides a composition, embedding, and interfaces.
you can mimic inheritance behavior using composition to use an existing struct object to define a starting behavior of a new object. 
Once the new object is created, functionality can be extended beyond the original struct.

Robert Griesemer, Rob Pike, and Ken Thompson.

concurrency Vs Paralallysam  :
    concurrency :
        Concurrency involves structuring a program so that two or more tasks may be in progress simultaneously,
        Note that while parallelism requires more than one processor or thread, concurrency does not.
        Concurrent programs may or may not run in parallel
    Paralallysam : 
        Parallel computing allows us to break down complex problems into smaller pieces, and execute those smaller problems simultaneously. 
        The alternative, using a single process, requires each step of the problem to be executed sequentially. The benefit here is that executing these smaller pieces of the problem simultaneously can increase the speed in which the overall problem is solved
    


Goroutines :
     A Goroutine is a function or method which executes independently and simultaneously in connection with any other Goroutines present in your program. Or in other words, every concurrently executing activity in Go language is known as a Goroutines. You can consider a Goroutine like a light weighted thread. 
     The cost of creating Goroutines is very small as compared to the thread. Every program contains at least a single Goroutine and that Goroutine is known as the main Goroutine. All the Goroutines are working under the main Goroutines if the main Goroutine terminated, then all the goroutine present in the program also terminated. Goroutine always works in the background.
     goroutines as light-weight, inexpensive threads managed by the Go runtime.
     goroutines are so inexpensive, we can run hundreds or thousands of them in our program without concern

Advantages of Goroutines :
    Goroutines are cheaper than threads.
    Goroutine are stored in the stack and the size of the stack can grow and shrink according to the requirement of the program. But in threads, the size of the stack is fixed.
    Goroutines can communicate using the channel and these channels are specially designed to prevent race conditions when accessing shared memory using Goroutines.
    Suppose a program has one thread, and that thread has many Goroutines associated with it. If any of Goroutine blocks the thread due to resource requirement 
    then all the remaining Goroutines will assign to a newly created OS thread. All these details are hidden from the programmers.

Select statement :
    Select statement waits until the communication(send or receive operation) is prepared for some cases to begin.

Race condition : 
    A race condition occurs when multiple threads try to access and modify the same data (memory address)
    E.g., if one thread tries to increase an integer and another thread tries to read it, this will cause a race condition. 
    On the other hand, there won't be a race condition, if the variable is read-only. In golang, threads are created implicitly when Goroutines are used.

How does mutex work?
    Mutex is created in an unlocked state.
    When the first call to mutex.Lock() is made, mutex state changes to Locked.
    Any other calls to mutex.Lock() will block the goroutine until mutex.Unlock() is called
    So, only one thread can access the critical section.

Channels :
    a channel is a medium through which a goroutine communicates with another goroutine and this communication is lock-free. Or in other words, 
    a channel is a technique which allows to let one goroutine to send data to another goroutine. 
    By default channel is bidirectional, means the goroutines can send or receive data through the same channel

    Syntax:
        var Channel_name chan Type  (OR)
        channel_name:= make(chan Type)
    
    Send operation: The send operation is used to send data from one goroutine to another goroutine with the help of a channel. Values like int, float64, and bool can safe and easy to send through a channel because they are copied so there is no risk of accidental concurrent access of the same value. 
    Similarly, strings are also safe to transfer because they are immutable. But for sending pointers or reference like a slice, map, etc. through a channel are not safe because the value of pointers or reference may change by sending goroutine or by the receiving goroutine at the same time and the result is unpredicted. So, when you use pointers or references in the channel you must make sure that they can only access by the one goroutine at a time.
    Channel are two type which are unbuffered and buffered. unbuffered channel are sychronized and buffered as asychronized.

Interfaces :
    the interface is a collection of methods as well as it is a custom type.
    it is necessary to implement all the methods declared in the interface for implementing an interface. 
    The go language interfaces are implemented implicitly. And it does not contain any specific keyword to implement an interface just like other languages

Defer :
    The defer keyword instructs a function to execute after the surrounding function completes.
        Example :
        ========
            package main

            import "fmt"

            func main() {
            // When we add `defer` before a function, that function is executed
            // after the surrounding function completes
            defer fmt.Println("this is printed once the function completes")

            fmt.Println("this is printed first")
            fmt.Println("this is printed second")
            }

            // OutPut :
                // this is printed first
                // this is printed second
                // this is printed once the function completes

        EXAMPLE 2 :
        ===========
            package main

            import "fmt"

            func main() {
            defer fmt.Println("this is printed once main completes")

            greet()

            fmt.Println("this is printed after greet is called")
            }

            func greet() {
            // this function executes once `greet()` completes.
            // It is independent of deferred functions declared elsewhere
            defer fmt.Println("printed after the first greeting")

            fmt.Println("first greeting")
            }

        // Output :
            // first greeting
            // printed after the first greeting
            // this is printed after greet is called
            // this is printed once main completes    

List the operators in Golang?
    Arithmetic operators
    Bitwise operators
    Relational operators
    Logical operators
    Assignment operators
    Misc operators
Q11. List data types on Golang?
    There are 4 data types in the Go language
    Basic type : 
            numbers, strings, and booleans
    Aggregate type :
            structures and arrays
    Reference type :
            slices, pointers, maps, channels, and functions
    Interface type

workspace of golang:
    “Src” the source file regulated into packages 
    “Pkg” package objects are stored in the directory
    “Bin” contains executable commands

Is GoLang fast?
    Golang’s concurrency model and small syntax make Golang fast programming language, 
    Golang compilation is very fast, Go hyperlinks all the dependency libraries into a single binary file, 
    as a result, putting off the dependence on servers. 

Go language interfaces differ from other languages. 
    In Go language, the interface is a system type that is applied to designate a set of 1 or
    more method signatures plus the interface is abstract, 
    so you are not permitted to create a case of the interface.

 The Go way to implement:
    Encapsulation - Go encapsulates things at the package level. 
    Names that start with a lowercase letter are only visible within that package. 
    You can hide anything in a private package and just expose specific types, interfaces, and factory functions.

Inheritance - composition by embedding an anonymous type is equivalent to implementation inheritance.

Polymorphism - A variable of type interface can hold any value which implements the interface. 
This property of interfaces is used to achieve polymorphism in Go.

Untyped constants
Typed constants
    Data Structure – Struct
    Encapsulation → state [“fields”] behaviour [“methods”] export / unexported
    Reusability → Inheritance [“Embedded Types”]
    Polymorphism → Interfaces
    Overriding → Promotion


A running program will store objects in two memory locations, the heap and the stack. 
Garbage collection operates on the heap, not the stack. 
The stack is a LIFO data structure that stores function values. 

What is a Linked List?
    A Linked List is a linear Data Structure but not doesn’t have continuous memory addresses like Arrays or Slices. Linked Lists are Dynamic in nature.
    In Golang Arrays we have to give size of the array while declaration, slice in golang uses arrays under the hood.
    The Linked List is a Dynamic Data Structure, it occupies memory only for the stored data.

Empty struct struct{} is realized in a special way in Go.
    ->It’s a smallest building block in Go. It’s size is literally 0 bytes.
    ->If it has zero size. you may create a slice of 1000’s empty structures and this slice will be very tiny. 
        Because really Go stores only a number of them in the slice but not them itself. The same story with channels.
    ->All pointers to it always point to the same special place in memory.
    ->Very useful in channels when you notify about some event but you don’t need to pass any information about it, 
        only a fact. Best solution is to pass an empty structure because it will only increment a counter in the channel but not assign memory, copy elements and so on. Sometime people use Boolean values for this purpose, but it’s much worse.
    ->Zero size container for methods. You may want have a mock for testing interfaces. Often you don’t need data on it, just methods with predefined input and output.
    ->Go has no Set object. Bit can be easily realized as a map[keyType]struct{}. This way map keeps only keys and no values.


mikolaj_wiecz@hcl.com
https://we.tl/t-Qh3khfnRWF
